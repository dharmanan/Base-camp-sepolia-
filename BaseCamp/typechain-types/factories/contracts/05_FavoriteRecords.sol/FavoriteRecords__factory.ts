/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  FavoriteRecords,
  FavoriteRecordsInterface,
} from "../../../contracts/05_FavoriteRecords.sol/FavoriteRecords";

const _abi = [
  {
    inputs: [
      {
        internalType: "string[]",
        name: "_approvedRecords",
        type: "string[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "albumName",
        type: "string",
      },
    ],
    name: "NotApproved",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_albumName",
        type: "string",
      },
    ],
    name: "addRecord",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    name: "approvedRecords",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getApprovedRecords",
    outputs: [
      {
        internalType: "string[]",
        name: "",
        type: "string[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address",
      },
    ],
    name: "getUserFavorites",
    outputs: [
      {
        internalType: "string[]",
        name: "",
        type: "string[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "resetUserFavorites",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162000bf238038062000bf2833981016040819052620000349162000159565b60005b8151811015620000e257600160008383815181106200005a576200005a62000283565b602002602001015160405162000071919062000299565b908152602001604051809103902060006101000a81548160ff0219169083151502179055506001828281518110620000ad57620000ad62000283565b60209081029190910181015182546001810184556000938452919092200190620000d8908262000346565b5060010162000037565b505062000412565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156200012b576200012b620000ea565b604052919050565b60005b838110156200015057818101518382015260200162000136565b50506000910152565b600060208083850312156200016d57600080fd5b82516001600160401b03808211156200018557600080fd5b8185019150601f86818401126200019b57600080fd5b825182811115620001b057620001b0620000ea565b8060051b620001c186820162000100565b918252848101860191868101908a841115620001dc57600080fd5b87870192505b838310156200027557825186811115620001fc5760008081fd5b8701603f81018c136200020f5760008081fd5b88810151604088821115620002285762000228620000ea565b6200023b828901601f19168c0162000100565b8281528e82848601011115620002515760008081fd5b62000262838d830184870162000133565b85525050509187019190870190620001e2565b9a9950505050505050505050565b634e487b7160e01b600052603260045260246000fd5b60008251620002ad81846020870162000133565b9190910192915050565b600181811c90821680620002cc57607f821691505b602082108103620002ed57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200034157600081815260208120601f850160051c810160208610156200031c5750805b601f850160051c820191505b818110156200033d5782815560010162000328565b5050505b505050565b81516001600160401b03811115620003625762000362620000ea565b6200037a81620003738454620002b7565b84620002f3565b602080601f831160018114620003b25760008415620003995750858301515b600019600386901b1c1916600185901b1785556200033d565b600085815260208120601f198616915b82811015620003e357888601518255948401946001909101908401620003c2565b5085821015620004025787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6107d080620004226000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c8063b374ac5911610050578063b374ac5914610094578063c7853148146100d2578063d81aa8c4146100e557600080fd5b80631cf0830b1461006c578063837f88781461008a575b600080fd5b6100746100f8565b604051610081919061040a565b60405180910390f35b6100926101d1565b005b6100c26100a23660046104b2565b805160208183018101805160008252928201919093012091525460ff1681565b6040519015158152602001610081565b6100746100e0366004610563565b6101eb565b6100926100f33660046105a0565b6102e7565b60606001805480602002602001604051908101604052809291908181526020016000905b828210156101c857838290600052602060002001805461013b90610612565b80601f016020809104026020016040519081016040528092919081815260200182805461016790610612565b80156101b45780601f10610189576101008083540402835291602001916101b4565b820191906000526020600020905b81548152906001019060200180831161019757829003601f168201915b50505050508152602001906001019061011c565b50505050905090565b3360009081526002602052604081206101e99161037e565b565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600260209081526040808320805482518185028101850190935280835260609492939192909184015b828210156102dc57838290600052602060002001805461024f90610612565b80601f016020809104026020016040519081016040528092919081815260200182805461027b90610612565b80156102c85780601f1061029d576101008083540402835291602001916102c8565b820191906000526020600020905b8154815290600101906020018083116102ab57829003601f168201915b505050505081526020019060010190610230565b505050509050919050565b600082826040516102f992919061064c565b9081526040519081900360200190205460ff1661034f5781816040517f4f0ffc1b00000000000000000000000000000000000000000000000000000000815260040161034692919061065c565b60405180910390fd5b336000908152600260209081526040822080546001810182559083529120016103798284836106d9565b505050565b508054600082559060005260206000209081019061039c919061039f565b50565b808211156103bc5760006103b382826103c0565b5060010161039f565b5090565b5080546103cc90610612565b6000825580601f106103dc575050565b601f01602090049060005260206000209081019061039c91905b808211156103bc57600081556001016103f6565b6000602080830181845280855180835260408601915060408160051b87010192508387016000805b8381101561048e57888603603f1901855282518051808852835b81811015610467578281018a01518982018b0152890161044c565b508781018901849052601f01601f1916909601870195509386019391860191600101610432565b509398975050505050505050565b634e487b7160e01b600052604160045260246000fd5b6000602082840312156104c457600080fd5b813567ffffffffffffffff808211156104dc57600080fd5b818401915084601f8301126104f057600080fd5b8135818111156105025761050261049c565b604051601f8201601f19908116603f0116810190838211818310171561052a5761052a61049c565b8160405282815287602084870101111561054357600080fd5b826020860160208301376000928101602001929092525095945050505050565b60006020828403121561057557600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461059957600080fd5b9392505050565b600080602083850312156105b357600080fd5b823567ffffffffffffffff808211156105cb57600080fd5b818501915085601f8301126105df57600080fd5b8135818111156105ee57600080fd5b86602082850101111561060057600080fd5b60209290920196919550909350505050565b600181811c9082168061062657607f821691505b60208210810361064657634e487b7160e01b600052602260045260246000fd5b50919050565b8183823760009101908152919050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b601f82111561037957600081815260208120601f850160051c810160208610156106b25750805b601f850160051c820191505b818110156106d1578281556001016106be565b505050505050565b67ffffffffffffffff8311156106f1576106f161049c565b610705836106ff8354610612565b8361068b565b6000601f84116001811461073957600085156107215750838201355b600019600387901b1c1916600186901b178355610793565b600083815260209020601f19861690835b8281101561076a578685013582556020948501946001909201910161074a565b50868210156107875760001960f88860031b161c19848701351681555b505060018560011b0183555b505050505056fea2646970667358221220888767da2d2bb14f22d2b63ab595851462dc5e68a4b0ee57f44acc54d8160c8864736f6c63430008140033";

type FavoriteRecordsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FavoriteRecordsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FavoriteRecords__factory extends ContractFactory {
  constructor(...args: FavoriteRecordsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _approvedRecords: string[],
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_approvedRecords, overrides || {});
  }
  override deploy(
    _approvedRecords: string[],
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_approvedRecords, overrides || {}) as Promise<
      FavoriteRecords & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): FavoriteRecords__factory {
    return super.connect(runner) as FavoriteRecords__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FavoriteRecordsInterface {
    return new Interface(_abi) as FavoriteRecordsInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): FavoriteRecords {
    return new Contract(address, _abi, runner) as unknown as FavoriteRecords;
  }
}
