/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface ArraysExerciseInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "afterY2K"
      | "appendToNumbers"
      | "getNumbers"
      | "numbers"
      | "resetNumbers"
      | "resetSenders"
      | "resetTimestamps"
      | "saveTimestamp"
      | "senders"
      | "timestamps"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "afterY2K", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "appendToNumbers",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getNumbers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "numbers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "resetNumbers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resetSenders",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resetTimestamps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "saveTimestamp",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "senders",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "timestamps",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "afterY2K", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "appendToNumbers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getNumbers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "numbers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "resetNumbers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resetSenders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resetTimestamps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "saveTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "senders", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "timestamps", data: BytesLike): Result;
}

export interface ArraysExercise extends BaseContract {
  connect(runner?: ContractRunner | null): ArraysExercise;
  waitForDeployment(): Promise<this>;

  interface: ArraysExerciseInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  afterY2K: TypedContractMethod<[], [[bigint[], string[]]], "view">;

  appendToNumbers: TypedContractMethod<
    [_toAppend: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  getNumbers: TypedContractMethod<[], [bigint[]], "view">;

  numbers: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  resetNumbers: TypedContractMethod<[], [void], "nonpayable">;

  resetSenders: TypedContractMethod<[], [void], "nonpayable">;

  resetTimestamps: TypedContractMethod<[], [void], "nonpayable">;

  saveTimestamp: TypedContractMethod<
    [_unixTimestamp: BigNumberish],
    [void],
    "nonpayable"
  >;

  senders: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  timestamps: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "afterY2K"
  ): TypedContractMethod<[], [[bigint[], string[]]], "view">;
  getFunction(
    nameOrSignature: "appendToNumbers"
  ): TypedContractMethod<[_toAppend: BigNumberish[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getNumbers"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "numbers"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "resetNumbers"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "resetSenders"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "resetTimestamps"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "saveTimestamp"
  ): TypedContractMethod<[_unixTimestamp: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "senders"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "timestamps"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  filters: {};
}
