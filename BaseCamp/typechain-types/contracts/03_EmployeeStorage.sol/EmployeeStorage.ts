/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface EmployeeStorageInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "checkForPacking"
      | "debugResetShares"
      | "grantShares"
      | "idNumber"
      | "name"
      | "viewSalary"
      | "viewShares"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "checkForPacking",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "debugResetShares",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantShares",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "idNumber", values?: undefined): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "viewSalary",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "viewShares",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "checkForPacking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "debugResetShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "idNumber", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "viewSalary", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "viewShares", data: BytesLike): Result;
}

export interface EmployeeStorage extends BaseContract {
  connect(runner?: ContractRunner | null): EmployeeStorage;
  waitForDeployment(): Promise<this>;

  interface: EmployeeStorageInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  checkForPacking: TypedContractMethod<[_slot: BigNumberish], [bigint], "view">;

  debugResetShares: TypedContractMethod<[], [void], "nonpayable">;

  grantShares: TypedContractMethod<
    [_newShares: BigNumberish],
    [void],
    "nonpayable"
  >;

  idNumber: TypedContractMethod<[], [bigint], "view">;

  name: TypedContractMethod<[], [string], "view">;

  viewSalary: TypedContractMethod<[], [bigint], "view">;

  viewShares: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "checkForPacking"
  ): TypedContractMethod<[_slot: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "debugResetShares"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "grantShares"
  ): TypedContractMethod<[_newShares: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "idNumber"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "viewSalary"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "viewShares"
  ): TypedContractMethod<[], [bigint], "view">;

  filters: {};
}
