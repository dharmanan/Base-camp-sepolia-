/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface ErrorTriageExerciseInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addToArr"
      | "applyModifier"
      | "diffWithNeighbor"
      | "getArr"
      | "popWithReturn"
      | "resetArr"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addToArr",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "applyModifier",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "diffWithNeighbor",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getArr", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "popWithReturn",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "resetArr", values?: undefined): string;

  decodeFunctionResult(functionFragment: "addToArr", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "applyModifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "diffWithNeighbor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getArr", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "popWithReturn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "resetArr", data: BytesLike): Result;
}

export interface ErrorTriageExercise extends BaseContract {
  connect(runner?: ContractRunner | null): ErrorTriageExercise;
  waitForDeployment(): Promise<this>;

  interface: ErrorTriageExerciseInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addToArr: TypedContractMethod<[_num: BigNumberish], [void], "nonpayable">;

  applyModifier: TypedContractMethod<
    [_base: BigNumberish, _modifier: BigNumberish],
    [bigint],
    "view"
  >;

  diffWithNeighbor: TypedContractMethod<
    [_a: BigNumberish, _b: BigNumberish, _c: BigNumberish, _d: BigNumberish],
    [bigint[]],
    "view"
  >;

  getArr: TypedContractMethod<[], [bigint[]], "view">;

  popWithReturn: TypedContractMethod<[], [bigint], "nonpayable">;

  resetArr: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addToArr"
  ): TypedContractMethod<[_num: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "applyModifier"
  ): TypedContractMethod<
    [_base: BigNumberish, _modifier: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "diffWithNeighbor"
  ): TypedContractMethod<
    [_a: BigNumberish, _b: BigNumberish, _c: BigNumberish, _d: BigNumberish],
    [bigint[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getArr"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "popWithReturn"
  ): TypedContractMethod<[], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "resetArr"
  ): TypedContractMethod<[], [void], "nonpayable">;

  filters: {};
}
