/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  GarageManager,
  GarageManagerInterface,
} from "../../../contracts/06_GarageManager.sol/GarageManager";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "BadCarIndex",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_make",
        type: "string",
      },
      {
        internalType: "string",
        name: "_model",
        type: "string",
      },
      {
        internalType: "string",
        name: "_color",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "_numberOfDoors",
        type: "uint256",
      },
    ],
    name: "addCar",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "garage",
    outputs: [
      {
        internalType: "string",
        name: "make",
        type: "string",
      },
      {
        internalType: "string",
        name: "model",
        type: "string",
      },
      {
        internalType: "string",
        name: "color",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "numberOfDoors",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getMyCars",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "make",
            type: "string",
          },
          {
            internalType: "string",
            name: "model",
            type: "string",
          },
          {
            internalType: "string",
            name: "color",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "numberOfDoors",
            type: "uint256",
          },
        ],
        internalType: "struct GarageManager.Car[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_user",
        type: "address",
      },
    ],
    name: "getUserCars",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "make",
            type: "string",
          },
          {
            internalType: "string",
            name: "model",
            type: "string",
          },
          {
            internalType: "string",
            name: "color",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "numberOfDoors",
            type: "uint256",
          },
        ],
        internalType: "struct GarageManager.Car[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "resetMyGarage",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "_make",
        type: "string",
      },
      {
        internalType: "string",
        name: "_model",
        type: "string",
      },
      {
        internalType: "string",
        name: "_color",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "_numberOfDoors",
        type: "uint256",
      },
    ],
    name: "updateCar",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50611013806100206000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c80634cd1ed3d116100505780634cd1ed3d146100cb5780636dcb7896146100e0578063d2d50bd8146100e857600080fd5b80632698286c14610077578063341fa05d146100a05780633ecd55a9146100a8575b600080fd5b61008a610085366004610a87565b6100fb565b6040516100979190610aef565b60405180910390f35b61008a61033b565b6100bb6100b6366004610b9b565b610563565b6040516100979493929190610bc5565b6100de6100d9366004610c59565b610748565b005b6100de610864565b6100de6100f6366004610d04565b61087e565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260208181526040808320805482518185028101850190935280835260609492939192909184015b82821015610330578382906000526020600020906004020160405180608001604052908160008201805461017190610da7565b80601f016020809104026020016040519081016040528092919081815260200182805461019d90610da7565b80156101ea5780601f106101bf576101008083540402835291602001916101ea565b820191906000526020600020905b8154815290600101906020018083116101cd57829003601f168201915b5050505050815260200160018201805461020390610da7565b80601f016020809104026020016040519081016040528092919081815260200182805461022f90610da7565b801561027c5780601f106102515761010080835404028352916020019161027c565b820191906000526020600020905b81548152906001019060200180831161025f57829003601f168201915b5050505050815260200160028201805461029590610da7565b80601f01602080910402602001604051908101604052809291908181526020018280546102c190610da7565b801561030e5780601f106102e35761010080835404028352916020019161030e565b820191906000526020600020905b8154815290600101906020018083116102f157829003601f168201915b505050505081526020016003820154815250508152602001906001019061013e565b505050509050919050565b33600090815260208181526040808320805482518185028101850190935280835260609492939192909184015b8282101561055a578382906000526020600020906004020160405180608001604052908160008201805461039b90610da7565b80601f01602080910402602001604051908101604052809291908181526020018280546103c790610da7565b80156104145780601f106103e957610100808354040283529160200191610414565b820191906000526020600020905b8154815290600101906020018083116103f757829003601f168201915b5050505050815260200160018201805461042d90610da7565b80601f016020809104026020016040519081016040528092919081815260200182805461045990610da7565b80156104a65780601f1061047b576101008083540402835291602001916104a6565b820191906000526020600020905b81548152906001019060200180831161048957829003601f168201915b505050505081526020016002820180546104bf90610da7565b80601f01602080910402602001604051908101604052809291908181526020018280546104eb90610da7565b80156105385780601f1061050d57610100808354040283529160200191610538565b820191906000526020600020905b81548152906001019060200180831161051b57829003601f168201915b5050505050815260200160038201548152505081526020019060010190610368565b50505050905090565b6000602052816000526040600020818154811061057f57600080fd5b9060005260206000209060040201600091509150508060000180546105a390610da7565b80601f01602080910402602001604051908101604052809291908181526020018280546105cf90610da7565b801561061c5780601f106105f15761010080835404028352916020019161061c565b820191906000526020600020905b8154815290600101906020018083116105ff57829003601f168201915b50505050509080600101805461063190610da7565b80601f016020809104026020016040519081016040528092919081815260200182805461065d90610da7565b80156106aa5780601f1061067f576101008083540402835291602001916106aa565b820191906000526020600020905b81548152906001019060200180831161068d57829003601f168201915b5050505050908060020180546106bf90610da7565b80601f01602080910402602001604051908101604052809291908181526020018280546106eb90610da7565b80156107385780601f1061070d57610100808354040283529160200191610738565b820191906000526020600020905b81548152906001019060200180831161071b57829003601f168201915b5050505050908060030154905084565b33600090815260208190526040902080548910610798576040517f40c901ce000000000000000000000000000000000000000000000000000000008152600481018a905260240160405180910390fd5b8787828b815481106107ac576107ac610de1565b906000526020600020906004020160000191826107ca929190610e5c565b508585828b815481106107df576107df610de1565b906000526020600020906004020160010191826107fd929190610e5c565b508383828b8154811061081257610812610de1565b90600052602060002090600402016002019182610830929190610e5c565b5081818a8154811061084457610844610de1565b906000526020600020906004020160030181905550505050505050505050565b33600090815260208190526040812061087c916109ac565b565b3360009081526020818152604091829020825160a0601f8b0184900490930281018301909352608083018981529092918291908b908b9081908501838280828437600092019190915250505090825250604080516020601f8a0181900481028201810190925288815291810191908990899081908401838280828437600092019190915250505090825250604080516020601f88018190048102820181019092528681529181019190879087908190840183828082843760009201829052509385525050506020918201859052835460018101855593815220815191926004020190819061096c9082610f1d565b50602082015160018201906109819082610f1d565b50604082015160028201906109969082610f1d565b5060608201518160030155505050505050505050565b50805460008255600402906000526020600020908101906109cd91906109d0565b50565b80821115610a105760006109e48282610a14565b6109f2600183016000610a14565b610a00600283016000610a14565b50600060038201556004016109d0565b5090565b508054610a2090610da7565b6000825580601f10610a30575050565b601f0160209004906000526020600020908101906109cd91905b80821115610a105760008155600101610a4a565b803573ffffffffffffffffffffffffffffffffffffffff81168114610a8257600080fd5b919050565b600060208284031215610a9957600080fd5b610aa282610a5e565b9392505050565b6000815180845260005b81811015610acf57602081850181015186830182015201610ab3565b506000602082860101526020601f19601f83011685010191505092915050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b83811015610b8d57603f19898403018552815160808151818652610b3c82870182610aa9565b915050888201518582038a870152610b548282610aa9565b9150508782015185820389870152610b6c8282610aa9565b60609384015196909301959095525094870194925090860190600101610b16565b509098975050505050505050565b60008060408385031215610bae57600080fd5b610bb783610a5e565b946020939093013593505050565b608081526000610bd86080830187610aa9565b8281036020840152610bea8187610aa9565b90508281036040840152610bfe8186610aa9565b91505082606083015295945050505050565b60008083601f840112610c2257600080fd5b50813567ffffffffffffffff811115610c3a57600080fd5b602083019150836020828501011115610c5257600080fd5b9250929050565b60008060008060008060008060a0898b031215610c7557600080fd5b88359750602089013567ffffffffffffffff80821115610c9457600080fd5b610ca08c838d01610c10565b909950975060408b0135915080821115610cb957600080fd5b610cc58c838d01610c10565b909750955060608b0135915080821115610cde57600080fd5b50610ceb8b828c01610c10565b999c989b50969995989497949560800135949350505050565b60008060008060008060006080888a031215610d1f57600080fd5b873567ffffffffffffffff80821115610d3757600080fd5b610d438b838c01610c10565b909950975060208a0135915080821115610d5c57600080fd5b610d688b838c01610c10565b909750955060408a0135915080821115610d8157600080fd5b50610d8e8a828b01610c10565b989b979a50959894979596606090950135949350505050565b600181811c90821680610dbb57607f821691505b602082108103610ddb57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b601f821115610e5757600081815260208120601f850160051c81016020861015610e345750805b601f850160051c820191505b81811015610e5357828155600101610e40565b5050505b505050565b67ffffffffffffffff831115610e7457610e74610df7565b610e8883610e828354610da7565b83610e0d565b6000601f841160018114610ebc5760008515610ea45750838201355b600019600387901b1c1916600186901b178355610f16565b600083815260209020601f19861690835b82811015610eed5786850135825560209485019460019092019101610ecd565b5086821015610f0a5760001960f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b815167ffffffffffffffff811115610f3757610f37610df7565b610f4b81610f458454610da7565b84610e0d565b602080601f831160018114610f805760008415610f685750858301515b600019600386901b1c1916600185901b178555610e53565b600085815260208120601f198616915b82811015610faf57888601518255948401946001909101908401610f90565b5085821015610fcd5787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fea2646970667358221220437924ec0d2cce6654d8aa04478b1fdcdb54ff5b6f35a3b7f2b7475a2aced44a64736f6c63430008140033";

type GarageManagerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GarageManagerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class GarageManager__factory extends ContractFactory {
  constructor(...args: GarageManagerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      GarageManager & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): GarageManager__factory {
    return super.connect(runner) as GarageManager__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GarageManagerInterface {
    return new Interface(_abi) as GarageManagerInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): GarageManager {
    return new Contract(address, _abi, runner) as unknown as GarageManager;
  }
}
