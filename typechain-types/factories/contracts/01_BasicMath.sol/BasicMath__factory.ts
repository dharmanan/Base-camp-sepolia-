/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  BasicMath,
  BasicMathInterface,
} from "../../../contracts/01_BasicMath.sol/BasicMath";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_a",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_b",
        type: "uint256",
      },
    ],
    name: "adder",
    outputs: [
      {
        internalType: "uint256",
        name: "sum",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "error",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_a",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_b",
        type: "uint256",
      },
    ],
    name: "subtractor",
    outputs: [
      {
        internalType: "uint256",
        name: "difference",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "error",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061010c806100206000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c806306b034e91460375780635270312a14605f575b600080fd5b6046604236600460b5565b606e565b6040805192835290151560208301520160405180910390f35b6046606a36600460b5565b6096565b60008083830184811015608857600060019250925050608f565b9150600090505b9250929050565b6000808383111560ab5750600090506001608f565b5050900390600090565b6000806040838503121560c757600080fd5b5050803592602090910135915056fea2646970667358221220f34e49f7cbf7ed6ddf028832fa3a660d7c7ab55273b8f4dd77874c411d175a3a64736f6c63430008140033";

type BasicMathConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BasicMathConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BasicMath__factory extends ContractFactory {
  constructor(...args: BasicMathConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      BasicMath & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): BasicMath__factory {
    return super.connect(runner) as BasicMath__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BasicMathInterface {
    return new Interface(_abi) as BasicMathInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): BasicMath {
    return new Contract(address, _abi, runner) as unknown as BasicMath;
  }
}
