/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace SillyStringUtils {
  export type HaikuStruct = { line1: string; line2: string; line3: string };

  export type HaikuStructOutput = [
    line1: string,
    line2: string,
    line3: string
  ] & { line1: string; line2: string; line3: string };
}

export interface ImportsExerciseInterface extends Interface {
  getFunction(
    nameOrSignature: "getHaiku" | "haiku" | "saveHaiku" | "shruggieHaiku"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "getHaiku", values?: undefined): string;
  encodeFunctionData(functionFragment: "haiku", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "saveHaiku",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "shruggieHaiku",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "getHaiku", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "haiku", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "saveHaiku", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "shruggieHaiku",
    data: BytesLike
  ): Result;
}

export interface ImportsExercise extends BaseContract {
  connect(runner?: ContractRunner | null): ImportsExercise;
  waitForDeployment(): Promise<this>;

  interface: ImportsExerciseInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getHaiku: TypedContractMethod<
    [],
    [SillyStringUtils.HaikuStructOutput],
    "view"
  >;

  haiku: TypedContractMethod<
    [],
    [
      [string, string, string] & { line1: string; line2: string; line3: string }
    ],
    "view"
  >;

  saveHaiku: TypedContractMethod<
    [_line1: string, _line2: string, _line3: string],
    [void],
    "nonpayable"
  >;

  shruggieHaiku: TypedContractMethod<
    [],
    [SillyStringUtils.HaikuStructOutput],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getHaiku"
  ): TypedContractMethod<[], [SillyStringUtils.HaikuStructOutput], "view">;
  getFunction(
    nameOrSignature: "haiku"
  ): TypedContractMethod<
    [],
    [
      [string, string, string] & { line1: string; line2: string; line3: string }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "saveHaiku"
  ): TypedContractMethod<
    [_line1: string, _line2: string, _line3: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "shruggieHaiku"
  ): TypedContractMethod<[], [SillyStringUtils.HaikuStructOutput], "view">;

  filters: {};
}
