/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface FavoriteRecordsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addRecord"
      | "approvedRecords"
      | "getApprovedRecords"
      | "getUserFavorites"
      | "resetUserFavorites"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "addRecord", values: [string]): string;
  encodeFunctionData(
    functionFragment: "approvedRecords",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getApprovedRecords",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserFavorites",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "resetUserFavorites",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "addRecord", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approvedRecords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApprovedRecords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserFavorites",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resetUserFavorites",
    data: BytesLike
  ): Result;
}

export interface FavoriteRecords extends BaseContract {
  connect(runner?: ContractRunner | null): FavoriteRecords;
  waitForDeployment(): Promise<this>;

  interface: FavoriteRecordsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addRecord: TypedContractMethod<[_albumName: string], [void], "nonpayable">;

  approvedRecords: TypedContractMethod<[arg0: string], [boolean], "view">;

  getApprovedRecords: TypedContractMethod<[], [string[]], "view">;

  getUserFavorites: TypedContractMethod<
    [_address: AddressLike],
    [string[]],
    "view"
  >;

  resetUserFavorites: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addRecord"
  ): TypedContractMethod<[_albumName: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "approvedRecords"
  ): TypedContractMethod<[arg0: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "getApprovedRecords"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getUserFavorites"
  ): TypedContractMethod<[_address: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "resetUserFavorites"
  ): TypedContractMethod<[], [void], "nonpayable">;

  filters: {};
}
