/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace GarageManager {
  export type CarStruct = {
    make: string;
    model: string;
    color: string;
    numberOfDoors: BigNumberish;
  };

  export type CarStructOutput = [
    make: string,
    model: string,
    color: string,
    numberOfDoors: bigint
  ] & { make: string; model: string; color: string; numberOfDoors: bigint };
}

export interface GarageManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addCar"
      | "garage"
      | "getMyCars"
      | "getUserCars"
      | "resetMyGarage"
      | "updateCar"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addCar",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "garage",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getMyCars", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getUserCars",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "resetMyGarage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateCar",
    values: [BigNumberish, string, string, string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "addCar", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "garage", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getMyCars", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUserCars",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resetMyGarage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateCar", data: BytesLike): Result;
}

export interface GarageManager extends BaseContract {
  connect(runner?: ContractRunner | null): GarageManager;
  waitForDeployment(): Promise<this>;

  interface: GarageManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addCar: TypedContractMethod<
    [
      _make: string,
      _model: string,
      _color: string,
      _numberOfDoors: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  garage: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [string, string, string, bigint] & {
        make: string;
        model: string;
        color: string;
        numberOfDoors: bigint;
      }
    ],
    "view"
  >;

  getMyCars: TypedContractMethod<[], [GarageManager.CarStructOutput[]], "view">;

  getUserCars: TypedContractMethod<
    [_user: AddressLike],
    [GarageManager.CarStructOutput[]],
    "view"
  >;

  resetMyGarage: TypedContractMethod<[], [void], "nonpayable">;

  updateCar: TypedContractMethod<
    [
      _index: BigNumberish,
      _make: string,
      _model: string,
      _color: string,
      _numberOfDoors: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addCar"
  ): TypedContractMethod<
    [
      _make: string,
      _model: string,
      _color: string,
      _numberOfDoors: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "garage"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [string, string, string, bigint] & {
        make: string;
        model: string;
        color: string;
        numberOfDoors: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMyCars"
  ): TypedContractMethod<[], [GarageManager.CarStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getUserCars"
  ): TypedContractMethod<
    [_user: AddressLike],
    [GarageManager.CarStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "resetMyGarage"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateCar"
  ): TypedContractMethod<
    [
      _index: BigNumberish,
      _make: string,
      _model: string,
      _color: string,
      _numberOfDoors: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  filters: {};
}
